// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Pal.Server.Database;

#nullable disable

namespace Pal.Server.Database.Migrations
{
    [DbContext(typeof(PalServerContext))]
    [Migration("20230222163107_AddUniqueIndexToSeenLocations")]
    partial class AddUniqueIndexToSeenLocations
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "7.0.3");

            modelBuilder.Entity("Pal.Server.Database.Account", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TEXT");

                    b.Property<string>("IpHash")
                        .HasMaxLength(20)
                        .HasColumnType("TEXT");

                    b.Property<string>("Roles")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Accounts");
                });

            modelBuilder.Entity("Pal.Server.Database.GlobalSetting", b =>
                {
                    b.Property<string>("Key")
                        .HasColumnType("TEXT");

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("TEXT");

                    b.HasKey("Key");

                    b.ToTable("GlobalSettings");
                });

            modelBuilder.Entity("Pal.Server.Database.SeenLocation", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<Guid>("AccountId")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("FirstSeenAt")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("PalaceLocationId")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("PalaceLocationId");

                    b.HasIndex("AccountId", "PalaceLocationId")
                        .IsUnique();

                    b.ToTable("SeenLocation");
                });

            modelBuilder.Entity("Pal.Server.Database.ServerLocation", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<Guid>("AccountId")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TEXT");

                    b.Property<ushort>("TerritoryType")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Type")
                        .HasColumnType("INTEGER");

                    b.Property<float>("X")
                        .HasColumnType("REAL");

                    b.Property<float>("Y")
                        .HasColumnType("REAL");

                    b.Property<float>("Z")
                        .HasColumnType("REAL");

                    b.HasKey("Id");

                    b.ToTable("Locations");
                });

            modelBuilder.Entity("Pal.Server.Database.SeenLocation", b =>
                {
                    b.HasOne("Pal.Server.Database.Account", "Account")
                        .WithMany("SeenLocations")
                        .HasForeignKey("AccountId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Pal.Server.Database.ServerLocation", "PalaceLocation")
                        .WithMany("SeenLocations")
                        .HasForeignKey("PalaceLocationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Account");

                    b.Navigation("PalaceLocation");
                });

            modelBuilder.Entity("Pal.Server.Database.Account", b =>
                {
                    b.Navigation("SeenLocations");
                });

            modelBuilder.Entity("Pal.Server.Database.ServerLocation", b =>
                {
                    b.Navigation("SeenLocations");
                });
#pragma warning restore 612, 618
        }
    }
}
